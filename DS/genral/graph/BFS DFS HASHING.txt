#include<stdio.h>
#include<stdlib.h>

int node;
int nv,ne;
int i , j ,s;
int visited[20]; 
int a[20][20]; 
int v1,v2;

int  hash[9][2] = {
       {0,0},{0,0},{0,0},
       {0,0},{0,0},{0,0},
       {0,0},{0,0},{0,0}
    };

 
struct queue
{
    int size;
    int f;
    int r;
    int* arr;
};
 
 
int isEmpty(struct queue *q){
    if(q->r==q->f){
        return 1;
    }
    return 0;
}
 
int isFull(struct queue *q){
    if(q->r==q->size-1){
        return 1;
    }
    return 0;
}
 
void enqueue(struct queue *q, int val){
    if(isFull(q)){
        printf("This Queue is full\n");
    }
    else{
        q->r++;
        q->arr[q->r] = val;
        
    }
}
 
int dequeue(struct queue *q){
    int a = -1;
    if(isEmpty(q)){
        printf("This Queue is empty\n");
    }
    else{
        q->f++;
        a = q->arr[q->f]; 
    }
    return a;
}

void DFS(int s){
    printf("%d ", s);
    visited[s] = 1;
    for(int j = 0; j < nv; j++)
    {
        if(a[s][j]==1 && !visited[j]){
            DFS(j);
        }
    }
}

int hash_fun(int e, int v)
{
    if(v < 9)
    {
        if(hash[v][0]==0)
    {
        hash[v][0] = e;
    }
    else if(hash[v][1]==0)
    {
        hash[v][1] = e;
    }
    else
    {
        hash_fun(e,v+1);
    }
    return 0;
    }

    else{
        printf("Hash table is full!!");
        return 1;
    }
   
}
 
int main(){
    
    struct queue q;
    q.size = 400;
    q.f = q.r = 0;
    q.arr = (int*) malloc(q.size*sizeof(int));
    int w1 = 1;
    int w2 = 1;
    int ch1,ch2;

    int no,e,v;
    

    while(w1==1)
    {
        printf("\nEnter your Choice\n1.Graph Traversal\n2.Hashing--Linear Probing\n3.Exit:\n");
        scanf("%d",&ch1);
        switch(ch1)
        {
            case 1:
            printf("Graph Traversing!!");

            
            printf("\nEnter the Number of Vertices: ");
            scanf("%d",&nv);
    
            for(int i = 0; i<nv;i++)
            {
               for(int j = 0; j<nv;j++)
               {
                  a[i][j] = 0;
                  a[j][i] = 0;
               } 
             visited[i]=0;
            }
    
             printf("Enter the Number of Edges: ");
             scanf("%d",&ne);
             printf("Enter the Vertices of the Edge.\n");
             for(int k=0; k<ne;k++)
            {
                printf("Edge %d ",k+1);
                scanf("%d %d",&v1,&v2);
                a[v1][v2] = 1;
                a[v2][v1] = 1;

            }
            while(w2==1)
            {
            printf("\n\nEnter your Choice\n1.BFS\n2.DFS\n3.Exit:\n");
            scanf("%d",&ch2);
            switch(ch2)
            {
                case 1:
                for(int i = 0; i<nv;i++)
               {visited[i]=0;
                }
                printf("\nBFS!!");
                printf("\nEnter the starting poition: ");
                scanf("%d",&s);
                printf("\n");
                printf("%d", s);
                visited[s] = 1;
                enqueue(&q, s); 
                 while (!isEmpty(&q))
                 {
                 int node = dequeue(&q);
                 for (int j = 0; j < nv; j++)
                 {
                    if(a[node][j] ==1 && visited[j] == 0){
                        printf("%d ", j);
                        visited[j] = 1;
                        enqueue(&q, j);
                      }
                    }
                 }
                break;

                case 2:
                for(int i = 0; i<nv;i++)
               {visited[i]=0;
                }
                printf("\nDFS!!");
                printf("\nEnter the starting poition: ");
                scanf("%d",&s);
                printf("\n");
                DFS(s);

                break;

                case 3:
                printf("Exit!!");
                w2 = 0;
                break;

                default:
                printf("Invalid Choice!!");
                break;
            }
            }
            break;

            case 2:
            printf("Hashing -- Linear Probing!!");
            printf("\nEnter the number of elements: ");
            scanf("%d",&no);
            int x = 0;
            for(int i=1;i<=no && x!=1;i++)
            {
                printf("Enter element %d: ",i);
                scanf("%d",&e);
                v = e%9;
                x = hash_fun(e,v);
                
            }
            printf("\nThe hash table is: \n");
            for(int i = 0;i<9;i++)
            {
                printf("%d  %d",hash[i][0],hash[i][1]);
                printf("\n");
            }
            break;

            case 3:
            printf("Exit!!");
            w1 = 0;
            break;

            default:
            printf("Invalid Choice!!");
            break;
        }
    }

    return 0;
}