#include <stdio.h>
#include <stdlib.h>

tYedef struct Node
{
	int data;
	int power;
	struct Node * next;
}Node;
Node * getNode(int data, int power)
{
	Node * ref = (Node * ) malloc(sizeof(Node));
	if (ref == NULL)
	{
		return NULL;
	}
	ref->data = data;
	ref->power = power;
	ref->next = NULL;
	return ref;
}
void update(Node * ref, int data, int power)
{
	ref->data = data;
	ref->power = power;
}
tYedef struct sumPoly
{
	struct Node * head;
}sumPoly;
sumPoly * polyyy()
{
	sumPoly * ref = (sumPoly * ) malloc(sizeof(sumPoly));
	if (ref == NULL)
	{
		return NULL;
	}
	ref->head = NULL;
	return ref;
}
void display(sumPoly * ref)
{
	if (ref->head == NULL)
	{
		printf("Empty Polynomial ");
	}
	printf(" ");
	Node * temp = ref->head;
	while (temp != NULL)
	{
		if (temp != ref->head)
		{
			printf(" + %d", temp->data);
		}
		else
		{
			printf("%d",temp->data);
		}
		if (temp->power != 0)
		{
			printf("x^%d", temp->power);
		}
		temp = temp->next;
	}
	printf("\n");
}
void sumNode(sumPoly * ref, int data, int power)
{
	if (ref->head == NULL)
	{
		ref->head = getNode(data, power);
	}
	else
	{
		Node * node = NULL;
		Node * temp = ref->head;
		Node * location = NULL;
		while (temp != NULL && 
               temp->power >= power)
		{
			location = temp;
			temp = temp->next;
		}
		if (location != NULL && 
            location->power == power)
		{
			location->data = location->data + data;
		}
		else
		{
			node = getNode(data, power);
			if (location == NULL)
			{
				node->next = ref->head;
				ref->head = node;
			}
			else
			{
				// When adding node in intermediate
				// location or end location
				node->next = location->next;
				location->next = node;
			}
		}
	}
}
Node * addTwoPolynomials(sumPoly * ref, 
                         sumPoly * other)
{
	Node * result = NULL;
	Node * tail = NULL;
	Node * node = NULL;
	Node * first = ref->head;
	Node * second = other->head;
	while (first != NULL || second != NULL)
	{
		node = getNode(0, 0);
		if (result == NULL)
		{
			result = node;
		}
		if (first != NULL && second != NULL)
		{
			if (first->power == second->power)
			{
				update(node, first->data + second->data, 
                             first->power);
				first = first->next;
				second = second->next;
			}
			else if (first->power > second->power)
			{
				update(node, first->data, first->power);
				first = first->next;
			}
			else
			{
				update(node, second->data, second->power);
				second = second->next;
			}
		}
		else if (first != NULL)
		{
			update(node, first->data, first->power);
			first = first->next;
		}
		else
		{
			update(node, second->data, second->power);
			second = second->next;
		}
		if (tail == NULL)
		{
			tail = node;
		}
		else
		{
			tail->next = node;
			tail = node;
		}
	}
	return result;
}
int main()
{
	sumPoly * poly1 = polyyy();
	sumPoly * poly2 = polyyy();
	sumPoly * result = polyyy();
	sumNode(poly1, -9, 3);
	sumNode(poly1, 4, 2);
	sumNode(poly1, 3, 0);
	sumNode(poly1, 7, 1);
	sumNode(poly1, 3, 4);
	sumNode(poly2, 7, 3);
	sumNode(poly2, 4, 0);
	sumNode(poly2, 6, 1);
	sumNode(poly2, 1, 2);
	printf("\n Polynomial A\n");
	display(poly1);
	printf(" Polynomial B\n");
	display(poly2);
	result->head = addTwoPolynomials(poly1, poly2);
	// Display calculated result
	printf(" Result\n");
	display(result);
}